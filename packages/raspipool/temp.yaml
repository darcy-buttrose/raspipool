sensor:
# Atlas Resistance Temperature Detector (RTD)
  - platform: atlas_scientific
# For serial ports use:
#   port: /dev/ttyUSB0
# For I2C enter the hex device id
    port: 0x66
    scan_interval: 30
    scale: 'F'

  - platform: statistics
    name: pool_temp_stat
    entity_id: sensor.ezo_temperature

  - platform: template
    sensors:
      pool_temp:
        unit_of_measurement: 'C'
        value_template: >
          {% if is_state('sensor.pool_temp_stat', 'unknown') %}
            0
          {% else %}
            {{ states('sensor.pool_temp_stat') }}
          {% endif %}
      temp_check_window:
        value_template: >
          {{ states('input_number.temp_check_window') | float  }}
      temp_check_delay:
        value_template: >
          {{ states('input_number.temp_check_delay') | float }}
      minutes_since_solar_pump_change:
        value_template: >
          {{ (((now().timestamp() | float) - (states.input_boolean.solar_pump_on.last_changed.timestamp() | float)) / 60) | int }}
      distance_from_window_boundary:
        value_template: >-
          {{ (( states('sensor.minutes_since_solar_pump_change') | float ) % ( states('input_number.temp_check_window') | float)) | int }}
      temp_range_low:
        value_template: >-
          {{ (states('input_number.temp_range_low') | float) }}
      temp_range_high:
        value_template: >-
          {{ (states('input_number.temp_range_high') | float) }}
      pool_temp_float:
        value_template: >-
          {{ (states('sensor.pool_temp') | float) }}


input_number:
  calibrate_temp:
    min: 40
    max: 90
    step: 1
    unit_of_measurement: 'F'
    icon: mdi:coolant-temperature
    mode: box
    initial: 70
  temp_range_low:
    min: 20
    max: 35
    step: .5
    unit_of_measurement: 'C'
    icon: mdi:coolant-temperature
    initial: 25
  temp_range_high:
    min: 20
    max: 35
    step: .5
    unit_of_measurement: 'C'
    icon: mdi:coolant-temperature
    initial: 28
  temp_check_delay:
    min: 1
    max: 15
    step: 1
    unit_of_measurement: 'minutes'
    icon: mdi:clock-start
    initial: 5
  temp_check_window:
    min: 1
    max: 120
    step: 1
    unit_of_measurement: 'minutes'
    icon: mdi:repeat
    initial: 60

input_boolean:
  solar_pump_active:
    initial: true
  solar_pump_on:
    initial: false
  solar_pump_running:
    initial: false
  dummy_pump:
    initial: false

binary_sensor:

  - platform: template
    sensors:
      pool_temp_threshold:
        value_template: >
          {{ ((((states('input_number.temp_range_low') | float) < (states('sensor.pool_temp') | float)) and ((states('input_number.temp_range_high') | float) > (states('sensor.pool_temp') | float))))}}
      pool_temp_check:
        value_template: >
          {{ (states('sensor.temp_check_delay') | float) < (states('sensor.distance_from_window_boundary') | float) }}
      on_window:
        value_template: >
          {{ states('sensor.distance_from_window_boundary') | int == 0 }}
      turn_solar_pump_off:
        value_template: >-
          {{ is_state('binary_sensor.pool_temp_check','on') and is_state('binary_sensor.pool_temp_threshold','off') }}
      solar_pump_running:
        value_template: >-
          {{ states('input_boolean.solar_pump_running') }}
      dummy_pump:
        value_template: >-
          {{ states('input_boolean.dummy_pump') }}

automation:
  - alias: Solar Pump On
    trigger:
      - platform: template
        value_template: "{{ is_state('binary_sensor.on_window', 'on') and is_state('input_boolean.solar_pump_on', 'on') and is_state('input_boolean.solar_pump_running', 'off') }}"
    condition: []
    action:
      - entity_id: input_boolean.solar_pump_running
        service: input_boolean.turn_on
  - alias: Solar Pump Off
    trigger:
      - platform: template
        value_template: "{{ is_state('binary_sensor.pool_temp_check','on') and is_state('binary_sensor.pool_temp_threshold','off') }}"
    action:
      - entity_id: input_boolean.solar_pump_running
        service: input_boolean.turn_off
  - alias: Solar Pump Off Imediate
    trigger:
      - platform: template
        value_template: "{{ is_state('input_boolean.solar_pump_on', 'off') }}"
    condition: []
    action:
      - entity_id: input_boolean.solar_pump_running
        service: input_boolean.turn_off

  - alias: Real Solar Pump On
    trigger:
      - platform: template
        value_template: "{{ is_state('binary_sensor.solar_pump_running','on') }}"
    condition: []
    action:
#      - service: input_boolean.turn_on
#        entity_id: input_boolean.dummy_pump
      - service: switch.turn_on
        entity_id: switch.pool_solar_pump
    - data_template:
        message: '{{trigger.to_state.attributes.friendly_name}}: {{trigger.to_state.state}}'
        title: 'Solar Pump On ({{trigger.to_state.state}})!'
      service: notify.notify


  - alias: Real Solar Pump Off
    trigger:
      - platform: template
        value_template: "{{ is_state('binary_sensor.solar_pump_running','off') }}"
    condition: []
    action:
#      - service: input_boolean.turn_off
#        entity_id: input_boolean.dummy_pump
      - service: switch.turn_off
        entity_id: switch.pool_solar_pump
    - data_template:
        message: '{{trigger.to_state.attributes.friendly_name}}: {{trigger.to_state.state}}'
        title: 'Solar Pump Off ({{trigger.to_state.state}})!'
      service: notify.notify


