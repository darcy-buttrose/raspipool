sensor:
# Atlas Resistance Temperature Detector (RTD)
  - platform: atlas_scientific
# For serial ports use:
#   port: /dev/ttyUSB0
# For I2C enter the hex device id
    port: 0x66
    scan_interval: 30
    scale: 'F'

  - platform: statistics
    name: pool_temp_stat
    entity_id: sensor.ezo_temperature

  - platform: template
    sensors:
      pool_temp:
        unit_of_measurement: 'C'
        value_template: >
          {% if is_state('sensor.pool_temp_stat', 'unknown') %}
            0
          {% else %}
            {{ states('sensor.pool_temp_stat') }}
          {% endif %}
      solar_pump_running:
        value_template: >
          {{ states.input_boolean.solar_pump_running.state }}
      seconds_since_solar_pump_change:
        value_template: >
          {{ (now().timestamp() - states.input_boolean.solar_pump_on.last_changed.timestamp()) | int }}
      distance_from_window_boundary:
        value_template: >-
          {{ (( states('sensor.seconds_since_solar_pump_change') | float ) % ( states('input_number.temp_check_window') | float * 60 )) | int }}
      temp_check_delay_ratio:
        value_template: >-
          {{ (( states('input_number.temp_check_delay') | float ) % ( states('input_number.temp_check_window') | float * 60 )) | int }}

# When does pump start
# if time since switch.pool_solar_pump state change to on is temp_check_window

# When does pump stop
# if time since last switch.pool_solar_pump state change to on is greater than temp_check_delay
# and binary_sensor.pool_temp_threshold is off


input_number:
  calibrate_temp:
    min: 40
    max: 90
    step: 1
    unit_of_measurement: 'F'
    icon: mdi:coolant-temperature
    mode: box
    initial: 70
  temp_range_low:
    min: 20
    max: 35
    step: .5
    unit_of_measurement: 'C'
    icon: mdi:coolant-temperature
    initial: 25
  temp_range_high:
    min: 20
    max: 35
    step: .5
    unit_of_measurement: 'C'
    icon: mdi:coolant-temperature
    initial: 28
  temp_check_delay:
    min: 30
    max: 300
    step: 1
    unit_of_measurement: 'seconds'
    icon: mdi:clock-start
    initial: 300
  temp_check_window:
    min: 30
    max: 120
    step: 30
    unit_of_measurement: 'minutes'
    icon: mdi:repeat
    initial: 60

input_boolean:
  solar_pump_active:
    initial: true
  solar_pump_on:
    initial: false
  solar_pump_running:
    initial: false

binary_sensor:

  - platform: threshold
    entity_id: sensor.pool_temp_stat
    lower: 25
    upper: 28
    name: pool_temp_threshold

  - platform: template
    sensors:
      pool_temp_check:
        value_template: "{{ (states('sensor.temp_check_delay_ratio') | int) == (states('distance_from_window_boundary') | int) }}"
      on_window:
        value_template: "{{ states('sensor.distance_from_window_boundary') | int == 0 }}"

automation:
  - alias: Solar Pump On
    trigger:
      - platform: template
        value_template: "{{ is_state('binary_sensor.on_window', 'on') and is_state('input_boolean.solar_pump_on', 'on') and is_state('sensor.solar_pump_running', 'off') }}"
    condition: []
    action:
      - entity_id: input_boolean.solar_pump_running
        service: input_boolean.turn_on
  - alias: Solar Pump Off
    trigger:
      - platform: state
        entity_id: binary_sensor.pool_temp_check
        state: 'on'
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: input_boolean.solar_pump_running
            state: 'on'
          - condition: state
            entity_id: sensor.pool_temp_threshold
            state: 'off'
    action:
      - entity_id: input_boolean.solar_pump_running
        service: input_boolean.turn_off
  - alias: Solar Pump Off Imediate
    trigger:
      - platform: template
        value_template: "{{ is_state('input_boolean.solar_pump_on', 'off') }}"
    condition: []
    action:
      - entity_id: input_boolean.solar_pump_running
        service: input_boolean.turn_off

